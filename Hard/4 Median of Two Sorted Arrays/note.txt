//solution 1: find_kth by discarding half of (one of) the array(s) in each step

// using divide and conquer idea, each time find the mid of both arrays

double findMedianSortedArrays(int A[], int m, int B[], int n) {
        /* A[0, 1, 2, ..., n-1, n] */
        /* A[0, 1, 2, ..., m-1, m] */
        int k = (m + n + 1) / 2;
        double v = (double)FindKth(A, 0, m - 1, B, 0, n - 1, k);

        if ((m+n) % 2 == 0) {
            int k2 = k+1;
            double v2 = (double)FindKth(A, 0, m - 1, B, 0, n - 1, k2);
            v = (v + v2) / 2;
        }

        return v;
    }

    // find the kth element int the two sorted arrays
    // let us say: A[aMid] <= B[bMid], x: mid len of a, y: mid len of b, then wen can know
    // 
    // (1) there will be at least (x + 1 + y) elements before bMid
    // (2) there will be at least (m - x - 1 + n - y) = m + n - (x + y +1) elements after aMid
    // therefore
    // if k <= x + y + 1, find the kth element in a and b, but unconsidering bMid and its suffix
    // if k > x + y + 1, find the k - (x + 1) th element in a and b, but unconsidering aMid and its prefix
    int FindKth(int A[], int aL, int aR, int B[], int bL, int bR, int k) {
        if (aL > aR) return B[bL + k - 1];
        if (bL > bR) return A[aL + k - 1];

        int aMid = (aL + aR) / 2;
        int bMid = (bL + bR) / 2;

        if (A[aMid] <= B[bMid]) {
            if (k <= (aMid - aL) + (bMid - bL) + 1) 
                return FindKth(A, aL, aR, B, bL, bMid - 1, k);
            else
                return FindKth(A, aMid + 1, aR, B, bL, bR, k - (aMid - aL) - 1);
        }
        else { // A[aMid] > B[bMid]
            if (k <= (aMid - aL) + (bMid - bL) + 1) 
                return FindKth(A, aL, aMid - 1, B, bL, bR, k);
            else
                return FindKth(A, aL, aR, B, bMid + 1, bR, k - (bMid - bL) - 1);
        }
    }


Solution 2: find_kth by another smart idea


If you solve the k-th minmum value of two sorted arrays, you solve this problem.This is a classical problem of "Divide and conquer".
Here is another more simple and more neat solution.
Cosider chosing first x numbers from A and k - x numbers from B.if these k numbers are the k minmum numbers of A and B, x must satisfies that A[x + 1] >= B[k - x] and B[k - x + 1] >= A[x] (for better explanation index is base-1). 
So this x is what we want.
Obviously, if A[x + 1] < B[k - x + 1] then x must be smaller, else if B[k - x] < A[x] then x must be greater. A nice two-value definition for binary search :)

To simplify edge cases, we cosider each array indefinite, with value of INTMIN when index < 1 and INTMAX when index > n.
//这个想法极其nb啊！！！
//很多麻烦的edge case是a[]全都都很小或者全都都很大。
//这样给 a[], b[] 加了一个虚拟的int_min, 和int_max以后，不影响结果，但是没有这样的edge case了！！

typedef vector<int> vi;
const int inf = 0x7fffffff, ninf = 0x80000000;
class Solution {
    int kth_min(vi& a, vi& b, int k, int n, int m){
        #define A(i) (i < 1 ? ninf : (i > n ? inf : a[i - 1]))
        #define B(i) (i < 1 ? ninf : (i > m ? inf : b[i - 1]))
        int l = 0, r = n + 1, x;
        while(l <= r){
            x = (l + r) >> 1;
            if(A(x) > B(k - x + 1)) r = x - 1;
            else if(B(k - x) > A(x + 1)) l = x + 1;
            else return max(A(x), B(k - x));
        }
        return 0;   //never execute , just to hide the warning :)
        #undef A
        #undef B
    }
public:
    double findMedianSortedArrays(vector<int>& a, vector<int>& b) {
        int n = a.size(), m = b.size();
        if(n > m) return findMedianSortedArrays(b, a); //make sure that a.size() <= b.size()
        if((m + n) & 1) return kth_min(a, b, (m + n + 1) >> 1, n, m);
        return (0.0 + kth_min(a, b, (m + n + 1) >> 1, n, m) + kth_min(a, b, ((m + n) >> 1) + 1, n, m)) * 0.5;
    }
};
